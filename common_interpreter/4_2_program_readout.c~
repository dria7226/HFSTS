void* instruction_table[] = {
#define LABEL_MODE
#define ENUMERATE
#include "core_programs.c" 
};

//working variables
DATA_TYPE* temp[4];
DATA_TYPE  argument_index;
DATA_TYPE  target_array, target_index;

//IO_TYPE* file;

#ifdef CLIT
no_of_messages = 0;
#endif

next_instruction:

#include "4_1_head_management.c"

#ifdef CLIT
CHECK_FOR_LIMIT
PRINT("%u:%u: ", ARRAY_AT(head_index), INDEX_AT(head_index),0);

PRINT("%s, ",core_programs_text[AT_HEAD_OFFSET(0)],0,0)

argument_index = 0;
while(argument_index < core_programs_arguments[AT_HEAD_OFFSET(0)]/NUMBER_OF_DATA_PER_ARGUMENT)
{
  #define ARGUMENT_TYPE AT_HEAD_OFFSET(1 + argument_index*NUMBER_OF_DATA_PER_ARGUMENT)
  if(ARGUMENT_TYPE >= NUMBER_OF_INDEX_TYPES)
  {
    PRINT("%u, ", ARGUMENT_TYPE,0,0)
  }
  else
  {
    PRINT("%s, ", index_type_text[ARGUMENT_TYPE],0,0)
  }
  
  PRINT("%u, ", AT_HEAD_OFFSET((argument_index + 1)*NUMBER_OF_DATA_PER_ARGUMENT),0,0)
  
  argument_index++;
}

#endif

argument_index = 0;

#include "check_and_set_arguments.c"

if(AT_HEAD_OFFSET(0) < NUMBER_OF_CORE_PROGRAMS)
  goto *instruction_table[AT_HEAD_OFFSET(0)];

#ifdef CLIT
PRINT("Invalid program code.\n",0,0,0);
#endif

//When there's no valid code, the interpreter will execute the next label under this comment, which should be EMPTY
#define INTERPRETER_MODE
#include "core_programs.c"

out:
