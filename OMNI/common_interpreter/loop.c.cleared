
void* instruction_table[] = {

&&EMPTY

,

&&EXIT

,

&&RUN_PERFORMANCE_TEST

,

&&ADD

,

};

DATA_TYPE* temp[4];
DATA_TYPE  instruction, argument_index;
DATA_TYPE  target_array, target_index;

next_instruction:

head_index = 0;

argument_index = 0;

while(argument_index < MEMORY_AT(CORE_INSTRUCTIONS_INFO, AT_HEAD_OFFSET(0)*NUMBER_OF_CORE_INSTRUCTIONS_INFO_ELEMENTS + NUMBER_OF_ARGUMENTS) )
{
  PRINT("Verifying argument %u\n",argument_index,0,0)

  if(AT_HEAD_OFFSET(argument_index*NUMBER_OF_DATA_PER_ARGUMENT + 1) >= NUMBER_OF_INDEX_TYPES) { ADVANCE_HEAD }

  switch(AT_HEAD_OFFSET(argument_index*NUMBER_OF_DATA_PER_ARGUMENT + 1))
  {
    case IMMEDIATE:
    {
      PRINT("IMMEDIATE check.\n",0,0,0)

temp[argument_index] = &MEMORY_AT(HEAD_ELEMENT_AT(head_index, ARRAY), AT_HEAD_OFFSET(NUMBER_OF_DATA_PER_ARGUMENT*argument_index + 2));

      break;
    }

    case DIRECT:
    {
      PRINT("DIRECT check.\n",0,0,0)

if(argument_index > 1)
  target_array = HEAD_ELEMENT_AT(head_index, ARRAY);
 else
  target_array = HEAD_ELEMENT_AT(head_index, PRIMARY_ARRAY + argument_index);

target_index = AT_HEAD_OFFSET(argument_index*NUMBER_OF_DATA_PER_ARGUMENT + 2);

if(target_array > capacity)
{
  SET_FLAG(ARRAY_ACCESS_FAILED, argument_index + 1)

  ADVANCE_HEAD
}

if(target_index > CAPACITY_AT(target_array))
{
  SET_FLAG(INDEX_ACCESS_FAILED, argument_index + 1)

  ADVANCE_HEAD
}

temp[argument_index] = &MEMORY_AT(target_array, target_index);

      break;
    }

    case POSITIVE_RELATIVE:
    {
      PRINT("P_RELATIVE check.\n",0,0,0)

target_array = HEAD_ELEMENT_AT(head_index, ARRAY);

target_index = INDEX_AT(head_index) + AT_HEAD_OFFSET(argument_index*NUMBER_OF_DATA_PER_ARGUMENT + 2);

if(target_array > capacity)
{
  SET_FLAG(ARRAY_ACCESS_FAILED, argument_index + 1)

  ADVANCE_HEAD
}

if(target_index > CAPACITY_AT(target_array))
{
  SET_FLAG(INDEX_ACCESS_FAILED, argument_index + 1)

  ADVANCE_HEAD
}

if(target_index > CAPACITY_AT(target_array) || target_index < INDEX_AT(head_index))
{
  SET_FLAG(OVERFLOW, argument_index + 1)

  ADVANCE_HEAD
  }

temp[argument_index] = &MEMORY_AT(target_array, target_index);

      break;
    }

    case NEGATIVE_RELATIVE:
    {
      PRINT("N_RELATIVE check.\n",0,0,0)

target_array = HEAD_ELEMENT_AT(head_index, ARRAY);

target_index = INDEX_AT(head_index) - AT_HEAD_OFFSET(argument_index*NUMBER_OF_DATA_PER_ARGUMENT + 2);

if(target_array > capacity)
{
  SET_FLAG(ARRAY_ACCESS_FAILED, argument_index + 1)

  ADVANCE_HEAD
}

if(target_index > CAPACITY_AT(target_array))
{
  SET_FLAG(INDEX_ACCESS_FAILED, argument_index + 1)

  ADVANCE_HEAD
}

if(target_index > INDEX_AT(head_index))
{
  SET_FLAG(UNDERFLOW,argument_index+1)

  ADVANCE_HEAD
}

temp[argument_index] = &MEMORY_AT(target_array, target_index);

      break;
    }
  }

  argument_index++;
}

PRINT("  *instruction_table[%u]\n",AT_HEAD_OFFSET(0),0,0)

instruction = AT_HEAD_OFFSET(0);
instruction *= instruction < NUMBER_OF_CORE_INSTRUCTIONS;
goto *instruction_table[instruction];

EMPTY :

goto advance_head;

RUN_PERFORMANCE_TEST :

goto advance_head;

ADD :

SET_FLAG(OVERFLOW, *temp[1] > (*temp[1] + *temp[0])) *temp[1] += *temp[0];

goto advance_head;

advance_head:
ADVANCE_HEAD
goto next_instruction;

EXIT: